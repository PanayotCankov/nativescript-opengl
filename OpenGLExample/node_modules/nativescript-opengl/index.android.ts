import { View } from "ui/core/view";

export function hello() {
    console.log("OpenGLView Hello!");
}

class AndroidOpenGLView extends android.opengl.GLSurfaceView {
    constructor(context: any) {
        super(context);
        console.log("ctor AndroidOpenGLView");
        return global.__native(this);
    }
}

export class OpenGLView extends View {
    private renderer;
    private _android;
    
    constructor() {
        super();
        console.log("ctor OpenGLView");
    }
    
    public _createUI() {
        console.log("Created native GLSurfaceView");

        //this._android = new AndroidOpenGLView(this._context);
        this._android = new android.opengl.GLSurfaceView(this._context);
        
        // Create an OpenGL ES 2.0 context
        this._android.setEGLContextClientVersion(2);
        
        this.renderer = new android.opengl.GLSurfaceView.Renderer({
            onSurfaceCreated: function(gl, config) {
                console.log("GLSurfaceView.Renderer onSurfaceCreated");
            },
            onDrawFrame: function(gl) {
                console.log("GLSurfaceView.Renderer draw");
            },
            onSurfaceChanged: function(gl, width, height) {
                console.log("GLSurfaceView.Renderer onSurfaceChanged " + gl + " " + width + " " + height);
            }
        });
        this._android.setRenderer(this.renderer);
        console.log("Created and set renderer: " + this.renderer);

        // Render the view only when there is a change in the drawing data
        this._android.setRenderMode(android.opengl.GLSurfaceView.RENDERMODE_CONTINUOUSLY);
    };
    
    get android() {
        return this._android;
    }
}

