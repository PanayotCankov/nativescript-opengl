import { View } from "ui/core/view";

declare var android: {
    opengl: {
        Matrix: any;
        GLES20: {
            GL_ACTIVE_TEXTURE: number;
			GL_DEPTH_BUFFER_BIT: number;
			GL_STENCIL_BUFFER_BIT: number;
			GL_COLOR_BUFFER_BIT: number;
			GL_FALSE: number;
			GL_TRUE: number;
			GL_POINTS: number;
			GL_LINES: number;
			GL_LINE_LOOP: number;
			GL_LINE_STRIP: number;
			GL_TRIANGLES: number;
			GL_TRIANGLE_STRIP: number;
			GL_TRIANGLE_FAN: number;
			GL_ZERO: number;
			GL_ONE: number;
			GL_SRC_COLOR: number;
			GL_ONE_MINUS_SRC_COLOR: number;
			GL_SRC_ALPHA: number;
			GL_ONE_MINUS_SRC_ALPHA: number;
			GL_DST_ALPHA: number;
			GL_ONE_MINUS_DST_ALPHA: number;
			GL_DST_COLOR: number;
			GL_ONE_MINUS_DST_COLOR: number;
			GL_SRC_ALPHA_SATURATE: number;
			GL_FUNC_ADD: number;
			GL_BLEND_EQUATION: number;
			GL_BLEND_EQUATION_RGB: number;
			GL_BLEND_EQUATION_ALPHA: number;
			GL_FUNC_SUBTRACT: number;
			GL_FUNC_REVERSE_SUBTRACT: number;
			GL_BLEND_DST_RGB: number;
			GL_BLEND_SRC_RGB: number;
			GL_BLEND_DST_ALPHA: number;
			GL_BLEND_SRC_ALPHA: number;
			GL_CONSTANT_COLOR: number;
			GL_ONE_MINUS_CONSTANT_COLOR: number;
			GL_CONSTANT_ALPHA: number;
			GL_ONE_MINUS_CONSTANT_ALPHA: number;
			GL_BLEND_COLOR: number;
			GL_ARRAY_BUFFER: number;
			GL_ELEMENT_ARRAY_BUFFER: number;
			GL_ARRAY_BUFFER_BINDING: number;
			GL_ELEMENT_ARRAY_BUFFER_BINDING: number;
			GL_STREAM_DRAW: number;
			GL_STATIC_DRAW: number;
			GL_DYNAMIC_DRAW: number;
			GL_BUFFER_SIZE: number;
			GL_BUFFER_USAGE: number;
			GL_CURRENT_VERTEX_ATTRIB: number;
			GL_FRONT: number;
			GL_BACK: number;
			GL_FRONT_AND_BACK: number;
			GL_TEXTURE_2D: number;
			GL_CULL_FACE: number;
			GL_BLEND: number;
			GL_DITHER: number;
			GL_STENCIL_TEST: number;
			GL_DEPTH_TEST: number;
			GL_SCISSOR_TEST: number;
			GL_POLYGON_OFFSET_FILL: number;
			GL_SAMPLE_ALPHA_TO_COVERAGE: number;
			GL_SAMPLE_COVERAGE: number;
			GL_NO_ERROR: number;
			GL_INVALID_ENUM: number;
			GL_INVALID_VALUE: number;
			GL_INVALID_OPERATION: number;
			GL_OUT_OF_MEMORY: number;
			GL_CW: number;
			GL_CCW: number;
			GL_LINE_WIDTH: number;
			GL_ALIASED_POINT_SIZE_RANGE: number;
			GL_ALIASED_LINE_WIDTH_RANGE: number;
			GL_CULL_FACE_MODE: number;
			GL_FRONT_FACE: number;
			GL_DEPTH_RANGE: number;
			GL_DEPTH_WRITEMASK: number;
			GL_DEPTH_CLEAR_VALUE: number;
			GL_DEPTH_FUNC: number;
			GL_STENCIL_CLEAR_VALUE: number;
			GL_STENCIL_FUNC: number;
			GL_STENCIL_FAIL: number;
			GL_STENCIL_PASS_DEPTH_FAIL: number;
			GL_STENCIL_PASS_DEPTH_PASS: number;
			GL_STENCIL_REF: number;
			GL_STENCIL_VALUE_MASK: number;
			GL_STENCIL_WRITEMASK: number;
			GL_STENCIL_BACK_FUNC: number;
			GL_STENCIL_BACK_FAIL: number;
			GL_STENCIL_BACK_PASS_DEPTH_FAIL: number;
			GL_STENCIL_BACK_PASS_DEPTH_PASS: number;
			GL_STENCIL_BACK_REF: number;
			GL_STENCIL_BACK_VALUE_MASK: number;
			GL_STENCIL_BACK_WRITEMASK: number;
			GL_VIEWPORT: number;
			GL_SCISSOR_BOX: number;
			GL_COLOR_CLEAR_VALUE: number;
			GL_COLOR_WRITEMASK: number;
			GL_UNPACK_ALIGNMENT: number;
			GL_PACK_ALIGNMENT: number;
			GL_MAX_TEXTURE_SIZE: number;
			GL_MAX_VIEWPORT_DIMS: number;
			GL_SUBPIXEL_BITS: number;
			GL_RED_BITS: number;
			GL_GREEN_BITS: number;
			GL_BLUE_BITS: number;
			GL_ALPHA_BITS: number;
			GL_DEPTH_BITS: number;
			GL_STENCIL_BITS: number;
			GL_POLYGON_OFFSET_UNITS: number;
			GL_POLYGON_OFFSET_FACTOR: number;
			GL_TEXTURE_BINDING_2D: number;
			GL_SAMPLE_BUFFERS: number;
			GL_SAMPLES: number;
			GL_SAMPLE_COVERAGE_VALUE: number;
			GL_SAMPLE_COVERAGE_INVERT: number;
			GL_NUM_COMPRESSED_TEXTURE_FORMATS: number;
			GL_COMPRESSED_TEXTURE_FORMATS: number;
			GL_DONT_CARE: number;
			GL_FASTEST: number;
			GL_NICEST: number;
			GL_GENERATE_MIPMAP_HINT: number;
			GL_BYTE: number;
			GL_UNSIGNED_BYTE: number;
			GL_SHORT: number;
			GL_UNSIGNED_SHORT: number;
			GL_INT: number;
			GL_UNSIGNED_INT: number;
			GL_FLOAT: number;
			GL_FIXED: number;
			GL_DEPTH_COMPONENT: number;
			GL_ALPHA: number;
			GL_RGB: number;
			GL_RGBA: number;
			GL_LUMINANCE: number;
			GL_LUMINANCE_ALPHA: number;
			GL_UNSIGNED_SHORT_4_4_4_4: number;
			GL_UNSIGNED_SHORT_5_5_5_1: number;
			GL_UNSIGNED_SHORT_5_6_5: number;
			GL_FRAGMENT_SHADER: number;
			GL_VERTEX_SHADER: number;
			GL_MAX_VERTEX_ATTRIBS: number;
			GL_MAX_VERTEX_UNIFORM_VECTORS: number;
			GL_MAX_VARYING_VECTORS: number;
			GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;
			GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;
			GL_MAX_TEXTURE_IMAGE_UNITS: number;
			GL_MAX_FRAGMENT_UNIFORM_VECTORS: number;
			GL_SHADER_TYPE: number;
			GL_DELETE_STATUS: number;
			GL_LINK_STATUS: number;
			GL_VALIDATE_STATUS: number;
			GL_ATTACHED_SHADERS: number;
			GL_ACTIVE_UNIFORMS: number;
			GL_ACTIVE_UNIFORM_MAX_LENGTH: number;
			GL_ACTIVE_ATTRIBUTES: number;
			GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: number;
			GL_SHADING_LANGUAGE_VERSION: number;
			GL_CURRENT_PROGRAM: number;
			GL_NEVER: number;
			GL_LESS: number;
			GL_EQUAL: number;
			GL_LEQUAL: number;
			GL_GREATER: number;
			GL_NOTEQUAL: number;
			GL_GEQUAL: number;
			GL_ALWAYS: number;
			GL_KEEP: number;
			GL_REPLACE: number;
			GL_INCR: number;
			GL_DECR: number;
			GL_INVERT: number;
			GL_INCR_WRAP: number;
			GL_DECR_WRAP: number;
			GL_VENDOR: number;
			GL_RENDERER: number;
			GL_VERSION: number;
			GL_EXTENSIONS: number;
			GL_NEAREST: number;
			GL_LINEAR: number;
			GL_NEAREST_MIPMAP_NEAREST: number;
			GL_LINEAR_MIPMAP_NEAREST: number;
			GL_NEAREST_MIPMAP_LINEAR: number;
			GL_LINEAR_MIPMAP_LINEAR: number;
			GL_TEXTURE_MAG_FILTER: number;
			GL_TEXTURE_MIN_FILTER: number;
			GL_TEXTURE_WRAP_S: number;
			GL_TEXTURE_WRAP_T: number;
			GL_TEXTURE: number;
			GL_TEXTURE_CUBE_MAP: number;
			GL_TEXTURE_BINDING_CUBE_MAP: number;
			GL_TEXTURE_CUBE_MAP_POSITIVE_X: number;
			GL_TEXTURE_CUBE_MAP_NEGATIVE_X: number;
			GL_TEXTURE_CUBE_MAP_POSITIVE_Y: number;
			GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: number;
			GL_TEXTURE_CUBE_MAP_POSITIVE_Z: number;
			GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: number;
			GL_MAX_CUBE_MAP_TEXTURE_SIZE: number;
			GL_TEXTURE0: number;
			GL_TEXTURE1: number;
			GL_TEXTURE2: number;
			GL_TEXTURE3: number;
			GL_TEXTURE4: number;
			GL_TEXTURE5: number;
			GL_TEXTURE6: number;
			GL_TEXTURE7: number;
			GL_TEXTURE8: number;
			GL_TEXTURE9: number;
			GL_TEXTURE10: number;
			GL_TEXTURE11: number;
			GL_TEXTURE12: number;
			GL_TEXTURE13: number;
			GL_TEXTURE14: number;
			GL_TEXTURE15: number;
			GL_TEXTURE16: number;
			GL_TEXTURE17: number;
			GL_TEXTURE18: number;
			GL_TEXTURE19: number;
			GL_TEXTURE20: number;
			GL_TEXTURE21: number;
			GL_TEXTURE22: number;
			GL_TEXTURE23: number;
			GL_TEXTURE24: number;
			GL_TEXTURE25: number;
			GL_TEXTURE26: number;
			GL_TEXTURE27: number;
			GL_TEXTURE28: number;
			GL_TEXTURE29: number;
			GL_TEXTURE30: number;
			GL_TEXTURE31: number;
			GL_REPEAT: number;
			GL_CLAMP_TO_EDGE: number;
			GL_MIRRORED_REPEAT: number;
			GL_FLOAT_VEC2: number;
			GL_FLOAT_VEC3: number;
			GL_FLOAT_VEC4: number;
			GL_INT_VEC2: number;
			GL_INT_VEC3: number;
			GL_INT_VEC4: number;
			GL_BOOL: number;
			GL_BOOL_VEC2: number;
			GL_BOOL_VEC3: number;
			GL_BOOL_VEC4: number;
			GL_FLOAT_MAT2: number;
			GL_FLOAT_MAT3: number;
			GL_FLOAT_MAT4: number;
			GL_SAMPLER_2D: number;
			GL_SAMPLER_CUBE: number;
			GL_VERTEX_ATTRIB_ARRAY_ENABLED: number;
			GL_VERTEX_ATTRIB_ARRAY_SIZE: number;
			GL_VERTEX_ATTRIB_ARRAY_STRIDE: number;
			GL_VERTEX_ATTRIB_ARRAY_TYPE: number;
			GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: number;
			GL_VERTEX_ATTRIB_ARRAY_POINTER: number;
			GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;
			GL_IMPLEMENTATION_COLOR_READ_TYPE: number;
			GL_IMPLEMENTATION_COLOR_READ_FORMAT: number;
			GL_COMPILE_STATUS: number;
			GL_INFO_LOG_LENGTH: number;
			GL_SHADER_SOURCE_LENGTH: number;
			GL_SHADER_COMPILER: number;
			GL_SHADER_BINARY_FORMATS: number;
			GL_NUM_SHADER_BINARY_FORMATS: number;
			GL_LOW_FLOAT: number;
			GL_MEDIUM_FLOAT: number;
			GL_HIGH_FLOAT: number;
			GL_LOW_INT: number;
			GL_MEDIUM_INT: number;
			GL_HIGH_INT: number;
			GL_FRAMEBUFFER: number;
			GL_RENDERBUFFER: number;
			GL_RGBA4: number;
			GL_RGB5_A1: number;
			GL_RGB565: number;
			GL_DEPTH_COMPONENT16: number;
			GL_STENCIL_INDEX: number;
			GL_STENCIL_INDEX8: number;
			GL_RENDERBUFFER_WIDTH: number;
			GL_RENDERBUFFER_HEIGHT: number;
			GL_RENDERBUFFER_INTERNAL_FORMAT: number;
			GL_RENDERBUFFER_RED_SIZE: number;
			GL_RENDERBUFFER_GREEN_SIZE: number;
			GL_RENDERBUFFER_BLUE_SIZE: number;
			GL_RENDERBUFFER_ALPHA_SIZE: number;
			GL_RENDERBUFFER_DEPTH_SIZE: number;
			GL_RENDERBUFFER_STENCIL_SIZE: number;
			GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;
			GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;
			GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;
			GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;
			GL_COLOR_ATTACHMENT0: number;
			GL_DEPTH_ATTACHMENT: number;
			GL_STENCIL_ATTACHMENT: number;
			GL_NONE: number;
			GL_FRAMEBUFFER_COMPLETE: number;
			GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;
			GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;
			GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;
			GL_FRAMEBUFFER_UNSUPPORTED: number;
			GL_FRAMEBUFFER_BINDING: number;
			GL_RENDERBUFFER_BINDING: number;
			GL_MAX_RENDERBUFFER_SIZE: number;
			GL_INVALID_FRAMEBUFFER_OPERATION: number;
            
			glActiveTexture(texture: number): void;
			glAttachShader(program: number, shader: number): void;
			glBindAttribLocation(program: number, index: number, name: string): void;
			glBindBuffer(target: number, buffer: number): void;
			glBindFramebuffer(target: number, framebuffer: number): void;
			glBindRenderbuffer(target: number, renderbuffer: number): void;
			glBindTexture(target: number, texture: number): void;
			glBlendColor(red: number, green: number, blue: number, alpha: number): void;
			glBlendEquation(mode: number): void;
			glBlendEquationSeparate(modeRGB: number, modeAlpha: number): void;
			glBlendFunc(sfactor: number, dfactor: number): void;
			glBlendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;
			// glBufferData(target: number, size: number, data: java.nio.Buffer, usage: number): void;
			// glBufferSubData(target: number, offset: number, size: number, data: java.nio.Buffer): void;
			glCheckFramebufferStatus(target: number): number;
			glClear(mask: number): void;
			glClearColor(red: number, green: number, blue: number, alpha: number): void;
			glClearDepthf(depth: number): void;
			glClearStencil(s: number): void;
			glColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;
			glCompileShader(shader: number): void;
			// glCompressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, imageSize: number, data: java.nio.Buffer): void;
			// glCompressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, imageSize: number, data: java.nio.Buffer): void;
			glCopyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void;
			glCopyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;
			glCreateProgram(): number;
			glCreateShader(type: number): number;
			glCullFace(mode: number): void;
			// glDeleteBuffers(n: number, buffers: native.Array<number>, offset: number): void;
			// glDeleteBuffers(n: number, buffers: java.nio.IntBuffer): void;
			// glDeleteFramebuffers(n: number, framebuffers: native.Array<number>, offset: number): void;
			// glDeleteFramebuffers(n: number, framebuffers: java.nio.IntBuffer): void;
			glDeleteProgram(program: number): void;
			// glDeleteRenderbuffers(n: number, renderbuffers: native.Array<number>, offset: number): void;
			// glDeleteRenderbuffers(n: number, renderbuffers: java.nio.IntBuffer): void;
			glDeleteShader(shader: number): void;
			// glDeleteTextures(n: number, textures: native.Array<number>, offset: number): void;
			// glDeleteTextures(n: number, textures: java.nio.IntBuffer): void;
			glDepthFunc(func: number): void;
			glDepthMask(flag: boolean): void;
			glDepthRangef(zNear: number, zFar: number): void;
			glDetachShader(program: number, shader: number): void;
			glDisable(cap: number): void;
			glDisableVertexAttribArray(index: number): void;
			glDrawArrays(mode: number, first: number, count: number): void;
			glDrawElements(mode: number, count: number, type: number, offset: number): void;
			// glDrawElements(mode: number, count: number, type: number, indices: java.nio.Buffer): void;
			glEnable(cap: number): void;
			glEnableVertexAttribArray(index: number): void;
			glFinish(): void;
			glFlush(): void;
			glFramebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: number): void;
			glFramebufferTexture2D(target: number, attachment: number, textarget: number, texture: number, level: number): void;
			glFrontFace(mode: number): void;
			// glGenBuffers(n: number, buffers: native.Array<number>, offset: number): void;
			// glGenBuffers(n: number, buffers: java.nio.IntBuffer): void;
			glGenerateMipmap(target: number): void;
			glGenFramebuffers(n: number, framebuffers: native.Array<number>, offset: number): void;
			glGenFramebuffers(n: number, framebuffers: java.nio.IntBuffer): void;
			glGenRenderbuffers(n: number, renderbuffers: native.Array<number>, offset: number): void;
			glGenRenderbuffers(n: number, renderbuffers: java.nio.IntBuffer): void;
			glGenTextures(n: number, textures: native.Array<number>, offset: number): void;
			glGenTextures(n: number, textures: java.nio.IntBuffer): void;
			// glGetActiveAttrib(program: number, index: number, bufsize: number, length: native.Array<number>, lengthOffset: number, size: native.Array<number>, sizeOffset: number, type: native.Array<number>, typeOffset: number, name: native.Array<number>, nameOffset: number): void;
			// glGetActiveAttrib(program: number, index: number, bufsize: number, length: java.nio.IntBuffer, size: java.nio.IntBuffer, type: java.nio.IntBuffer, name: number): void;
			// glGetActiveAttrib(program: number, index: number, size: native.Array<number>, sizeOffset: number, type: native.Array<number>, typeOffset: number): string;
			glGetActiveAttrib(program: number, index: number, size: java.nio.IntBuffer, type: java.nio.IntBuffer): string;
			// glGetActiveUniform(program: number, index: number, bufsize: number, length: native.Array<number>, lengthOffset: number, size: native.Array<number>, sizeOffset: number, type: native.Array<number>, typeOffset: number, name: native.Array<number>, nameOffset: number): void;
			// glGetActiveUniform(program: number, index: number, bufsize: number, length: java.nio.IntBuffer, size: java.nio.IntBuffer, type: java.nio.IntBuffer, name: number): void;
			// glGetActiveUniform(program: number, index: number, size: native.Array<number>, sizeOffset: number, type: native.Array<number>, typeOffset: number): string;
			glGetActiveUniform(program: number, index: number, size: java.nio.IntBuffer, type: java.nio.IntBuffer): string;
			// glGetAttachedShaders(program: number, maxcount: number, count: native.Array<number>, countOffset: number, shaders: native.Array<number>, shadersOffset: number): void;
			// glGetAttachedShaders(program: number, maxcount: number, count: java.nio.IntBuffer, shaders: java.nio.IntBuffer): void;
			glGetAttribLocation(program: number, name: string): number;
			// glGetBooleanv(pname: number, params: native.Array<boolean>, offset: number): void;
			// glGetBooleanv(pname: number, params: java.nio.IntBuffer): void;
			// glGetBufferParameteriv(target: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetBufferParameteriv(target: number, pname: number, params: java.nio.IntBuffer): void;
			glGetError(): number;
			// glGetFloatv(pname: number, params: native.Array<number>, offset: number): void;
			// glGetFloatv(pname: number, params: java.nio.FloatBuffer): void;
			// glGetFramebufferAttachmentParameteriv(target: number, attachment: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetFramebufferAttachmentParameteriv(target: number, attachment: number, pname: number, params: java.nio.IntBuffer): void;
			// glGetIntegerv(pname: number, params: native.Array<number>, offset: number): void;
			// glGetIntegerv(pname: number, params: java.nio.IntBuffer): void;
			// glGetProgramiv(program: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetProgramiv(program: number, pname: number, params: java.nio.IntBuffer): void;
			glGetProgramInfoLog(program: number): string;
			// glGetRenderbufferParameteriv(target: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetRenderbufferParameteriv(target: number, pname: number, params: java.nio.IntBuffer): void;
			// glGetShaderiv(shader: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetShaderiv(shader: number, pname: number, params: java.nio.IntBuffer): void;
			glGetShaderInfoLog(shader: number): string;
			// glGetShaderPrecisionFormat(shadertype: number, precisiontype: number, range: native.Array<number>, rangeOffset: number, precision: native.Array<number>, precisionOffset: number): void;
			// glGetShaderPrecisionFormat(shadertype: number, precisiontype: number, range: java.nio.IntBuffer, precision: java.nio.IntBuffer): void;
			// glGetShaderSource(shader: number, bufsize: number, length: native.Array<number>, lengthOffset: number, source: native.Array<number>, sourceOffset: number): void;
			// glGetShaderSource(shader: number, bufsize: number, length: java.nio.IntBuffer, source: number): void;
			glGetShaderSource(shader: number): string;
			glGetString(name: number): string;
			// glGetTexParameterfv(target: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetTexParameterfv(target: number, pname: number, params: java.nio.FloatBuffer): void;
			// glGetTexParameteriv(target: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetTexParameteriv(target: number, pname: number, params: java.nio.IntBuffer): void;
			// glGetUniformfv(program: number, location: number, params: native.Array<number>, offset: number): void;
			// glGetUniformfv(program: number, location: number, params: java.nio.FloatBuffer): void;
			// glGetUniformiv(program: number, location: number, params: native.Array<number>, offset: number): void;
			// glGetUniformiv(program: number, location: number, params: java.nio.IntBuffer): void;
			glGetUniformLocation(program: number, name: string): number;
			// glGetVertexAttribfv(index: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetVertexAttribfv(index: number, pname: number, params: java.nio.FloatBuffer): void;
			// glGetVertexAttribiv(index: number, pname: number, params: native.Array<number>, offset: number): void;
			// glGetVertexAttribiv(index: number, pname: number, params: java.nio.IntBuffer): void;
			glHint(target: number, mode: number): void;
			glIsBuffer(buffer: number): boolean;
			glIsEnabled(cap: number): boolean;
			glIsFramebuffer(framebuffer: number): boolean;
			glIsProgram(program: number): boolean;
			glIsRenderbuffer(renderbuffer: number): boolean;
			glIsShader(shader: number): boolean;
			glIsTexture(texture: number): boolean;
			glLineWidth(width: number): void;
			glLinkProgram(program: number): void;
			glPixelStorei(pname: number, param: number): void;
			glPolygonOffset(factor: number, units: number): void;
			// glReadPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: java.nio.Buffer): void;
			glReleaseShaderCompiler(): void;
			glRenderbufferStorage(target: number, internalformat: number, width: number, height: number): void;
			glSampleCoverage(value: number, invert: boolean): void;
			glScissor(x: number, y: number, width: number, height: number): void;
			// glShaderBinary(n: number, shaders: native.Array<number>, offset: number, binaryformat: number, binary: java.nio.Buffer, length: number): void;
			// glShaderBinary(n: number, shaders: java.nio.IntBuffer, binaryformat: number, binary: java.nio.Buffer, length: number): void;
			glShaderSource(shader: number, string: string): void;
			glStencilFunc(func: number, ref: number, mask: number): void;
			glStencilFuncSeparate(face: number, func: number, ref: number, mask: number): void;
			glStencilMask(mask: number): void;
			glStencilMaskSeparate(face: number, mask: number): void;
			glStencilOp(fail: number, zfail: number, zpass: number): void;
			glStencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void;
			// glTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: java.nio.Buffer): void;
			glTexParameterf(target: number, pname: number, param: number): void;
			// glTexParameterfv(target: number, pname: number, params: native.Array<number>, offset: number): void;
			// glTexParameterfv(target: number, pname: number, params: java.nio.FloatBuffer): void;
			glTexParameteri(target: number, pname: number, param: number): void;
			// glTexParameteriv(target: number, pname: number, params: native.Array<number>, offset: number): void;
			// glTexParameteriv(target: number, pname: number, params: java.nio.IntBuffer): void;
			// glTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: java.nio.Buffer): void;
			glUniform1f(location: number, x: number): void;
			// glUniform1fv(location: number, count: number, v: native.Array<number>, offset: number): void;
			// glUniform1fv(location: number, count: number, v: java.nio.FloatBuffer): void;
			glUniform1i(location: number, x: number): void;
			// glUniform1iv(location: number, count: number, v: native.Array<number>, offset: number): void;
			// glUniform1iv(location: number, count: number, v: java.nio.IntBuffer): void;
			glUniform2f(location: number, x: number, y: number): void;
			// glUniform2fv(location: number, count: number, v: native.Array<number>, offset: number): void;
			// glUniform2fv(location: number, count: number, v: java.nio.FloatBuffer): void;
			glUniform2i(location: number, x: number, y: number): void;
			// glUniform2iv(location: number, count: number, v: native.Array<number>, offset: number): void;
			// glUniform2iv(location: number, count: number, v: java.nio.IntBuffer): void;
			glUniform3f(location: number, x: number, y: number, z: number): void;
			// glUniform3fv(location: number, count: number, v: native.Array<number>, offset: number): void;
			// glUniform3fv(location: number, count: number, v: java.nio.FloatBuffer): void;
			glUniform3i(location: number, x: number, y: number, z: number): void;
			// glUniform3iv(location: number, count: number, v: native.Array<number>, offset: number): void;
			// glUniform3iv(location: number, count: number, v: java.nio.IntBuffer): void;
			glUniform4f(location: number, x: number, y: number, z: number, w: number): void;
			// glUniform4fv(location: number, count: number, v: native.Array<number>, offset: number): void;
			// glUniform4fv(location: number, count: number, v: java.nio.FloatBuffer): void;
			glUniform4i(location: number, x: number, y: number, z: number, w: number): void;
			// glUniform4iv(location: number, count: number, v: native.Array<number>, offset: number): void;
			// glUniform4iv(location: number, count: number, v: java.nio.IntBuffer): void;
			// glUniformMatrix2fv(location: number, count: number, transpose: boolean, value: native.Array<number>, offset: number): void;
			// glUniformMatrix2fv(location: number, count: number, transpose: boolean, value: java.nio.FloatBuffer): void;
			// glUniformMatrix3fv(location: number, count: number, transpose: boolean, value: native.Array<number>, offset: number): void;
			// glUniformMatrix3fv(location: number, count: number, transpose: boolean, value: java.nio.FloatBuffer): void;
			// glUniformMatrix4fv(location: number, count: number, transpose: boolean, value: native.Array<number>, offset: number): void;
			// glUniformMatrix4fv(location: number, count: number, transpose: boolean, value: java.nio.FloatBuffer): void;
			glUseProgram(program: number): void;
			glValidateProgram(program: number): void;
			glVertexAttrib1f(indx: number, x: number): void;
			// glVertexAttrib1fv(indx: number, values: native.Array<number>, offset: number): void;
			// glVertexAttrib1fv(indx: number, values: java.nio.FloatBuffer): void;
			glVertexAttrib2f(indx: number, x: number, y: number): void;
			// glVertexAttrib2fv(indx: number, values: native.Array<number>, offset: number): void;
			// glVertexAttrib2fv(indx: number, values: java.nio.FloatBuffer): void;
			glVertexAttrib3f(indx: number, x: number, y: number, z: number): void;
			// glVertexAttrib3fv(indx: number, values: native.Array<number>, offset: number): void;
			// glVertexAttrib3fv(indx: number, values: java.nio.FloatBuffer): void;
			glVertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void;
			// glVertexAttrib4fv(indx: number, values: native.Array<number>, offset: number): void;
			// glVertexAttrib4fv(indx: number, values: java.nio.FloatBuffer): void;
			glVertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void;
			// glVertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, ptr: java.nio.Buffer): void;
			glViewport(x: number, y: number, width: number, height: number): void;
        }
    }
}

var GLES20 = android.opengl.GLES20;
var Matrix = android.opengl.Matrix;

export function hello() {
    console.log("OpenGLView Hello!");
}

class AndroidOpenGLView extends android.opengl.GLSurfaceView {
    constructor(context: any) {
        super(context);
        console.log("ctor AndroidOpenGLView");
        return global.__native(this);
    }
}

export class OpenGLView extends View {
    private renderer;
    private _android;
    
    // http://stackoverflow.com/questions/30202248/creating-3d-cube-using-android-opengl-es-2-0
    
    private vertexShaderCode =
        "uniform mat4 uMVPMatrix;\n" +
        "attribute vec4 vPosition;\n" +
        "void main() {\n" +
        "  gl_Position = uMVPMatrix * vPosition;\n" +
        "}\n";
    private vertexShader;
    private fragmentShaderCode =
        "precision mediump float; \n" +
        "uniform vec4 vColor;\n" +
        "void main() {\n" +
        "  gl_FragColor = vColor;\n" +
        "}\n";
    private fragmentShader;

    private modelViewProjectionMatrix = Array.create("float", 16);
    private projectionMatrix = Array.create("float", 16);
    private viewMatrix = Array.create("float", 16);
    private rotationMatrix = Array.create("float", 16);
    
    private angle = 0;
    
    private mProgram;
    private muMVPMatrixHandle;
    
    constructor() {
        super();
        console.log("ctor OpenGLView");
    }
    
    public _createUI() {
        console.log("Created native GLSurfaceView");

        //this._android = new AndroidOpenGLView(this._context);
        this._android = new android.opengl.GLSurfaceView(this._context);
        
        // Create an OpenGL ES 2.0 context
        this._android.setEGLContextClientVersion(2);
        
        this.renderer = new android.opengl.GLSurfaceView.Renderer({
            onSurfaceCreated: function(gl, config) {
                console.log("GLSurfaceView.Renderer onSurfaceCreated");
                
                this.vertexShader = loadShader(android.opengl.GLES20.GL_VERTEX_SHADER, this.vertexShaderCode);
                this.fragmentShader = loadShader(android.opengl.GLES20.GL_FRAGMENT_SHADER, this.fragmentShaderCode);
                this.mProgram = createProgram(this.vertexShader, this.pixelShader);
                // TODO: Get param handles
                
                GLES20.glClearColor(1, 1, 1, 1);
                GLES20.glClearDepthf(1);

                console.log("End GLSurfaceView.Renderer onSurfaceCreated");
            },
            onDrawFrame: function(gl) {
                GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
                
                Matrix.setLookAtM(this.viewMatrix, 0, 0, 0, -4, 0, 0, 0, 0, 1, 0);
                Matrix.multipleyMM(this.modelViewProjectionMatrix, 0, this.projectionMatrix, 0, this.viewMatrix, 0);
                
                // Draw using modelViewProjectionMatrix...
                
                // Combine the projection and camera view matrices
                //Matrix.multiplyMM(mMVPMatrix, 0, this.mProjMatrix, 0, mVMatrix, 0);
                // Apply the combined projection and camera view transformations
                //GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPMatrix, 0);
                // Draw objects
            },
            onSurfaceChanged: function(gl, width, height) {
                console.log("GLSurfaceView.Renderer onSurfaceChanged " + gl + " " + width + " " + height);
                
                android.opengl.GLES20.glViewport(0, 0, width, height);
                
                var ratio: number = width / height;
                android.opengl.Matrix.frustumM(this.projectionMatrix, 0, -ratio * 3, ratio * 3, -3, 3, 1, 10);
                
                console.log("End GLSurfaceView.Renderer onSurfaceChanged");
            }
        });
        this._android.setRenderer(this.renderer);
        console.log("Created and set renderer: " + this.renderer);

        // Render the view only when there is a change in the drawing data
        this._android.setRenderMode(android.opengl.GLSurfaceView.RENDERMODE_CONTINUOUSLY);
    };
    
    get android(): android.widget.ProgressBar {
        return this._android;
    }
}

function createProgram(vertexShader, fragmentShader): number {
    console.log("createProgram");
    var program = android.opengl.GLES20.glCreateProgram();
    if (program != 0) {
        android.opengl.GLES20.glAttachShader(program, vertexShader);
        // checkGlError("glAttachShader");
        android.opengl.GLES20.glAttachShader(program, fragmentShader);
        // checkGlError("glAttachShader");
        android.opengl.GLES20.glLinkProgram(program);
        var linkStatus = Array.create("int", 1);
        android.opengl.GLES20.glGetProgramiv(program, android.opengl.GLES20.GL_LINK_STATUS, linkStatus, 0);
        if (linkStatus[0] != android.opengl.GLES20.GL_TRUE) {
            console.log("Could not link program");
            console.log(android.opengl.GLES20.glGetProgramInfoLog(program));
            android.opengl.GLES20.glDeleteProgram(program);
            program = 0;
        }
    }
    console.log("Created program: " + program);
    return program;
}

function loadShader(shaderType: number, source: string): number {
    console.log("loadShader");
    var shader: number = android.opengl.GLES20.glCreateShader(shaderType);
    if (shader != 0) {
        android.opengl.GLES20.glShaderSource(shader, source);
        android.opengl.GLES20.glCompileShader(shader);
        var compiled = Array.create("int", 1);
        android.opengl.GLES20.glGetShaderiv(shader, android.opengl.GLES20.GL_COMPILE_STATUS, compiled, 0);
        if (compiled[0] == 0) {
            console.log("Could not compile shader " + shaderType);
            console.log(android.opengl.GLES20.glGetShaderInfoLog(shader));
            android.opengl.GLES20.glDeleteShader(shader);
            shader = 0;
        }
    }
    console.log("Created shader: " + shader);
    return shader;
}
